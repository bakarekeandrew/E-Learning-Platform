@page
@model E_Learning_Platform.Pages.Analytics.ReportsModel
@{
    ViewData["Title"] = "Analytics Reports";
    Layout = "_AdminLayout";
}

@section Styles {
    <style>
        .report-filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .metric-checkboxes {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }

        .metric-category {
            background: #f8f9fc;
            border-radius: 0.5rem;
            padding: 1rem;
        }

        .metric-item {
            display: flex;
            align-items: start;
            margin: 0.5rem 0;
        }

        .metric-item input[type="checkbox"] {
            margin-top: 0.25rem;
            margin-right: 0.5rem;
        }

        .metric-info {
            font-size: 0.875rem;
            color: #858796;
            margin-top: 0.25rem;
        }

        .export-options {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .report-table {
            width: 100%;
            margin-top: 1rem;
        }

        .report-table th {
            background: #4e73df;
            color: white;
            padding: 0.75rem;
        }

        .report-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #e3e6f0;
        }

        .report-summary {
            background: #f8f9fc;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #4e73df;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}

<div class="container-fluid">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/AdminDashboard">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/Analytics">Analytics</a></li>
            <li class="breadcrumb-item active">Reports</li>
        </ol>
    </nav>

    <div class="card">
        <div class="card-header">
            <h5 class="m-0 font-weight-bold text-primary">Generate Custom Report</h5>
        </div>
        <div class="card-body">
            <form id="reportForm" method="post">
                <div class="report-filters">
                    <div class="form-group">
                        <label for="startDate">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="StartDate" 
                               value="@DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd")">
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="EndDate" 
                               value="@DateTime.Now.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="form-group">
                        <label for="userRole">User Role</label>
                        <select class="form-control" id="userRole" name="UserRole">
                            <option value="">All Roles</option>
                            <option value="Student">Students</option>
                            <option value="Instructor">Instructors</option>
                            <option value="Admin">Administrators</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="reportType">Report Type</label>
                        <select class="form-control" id="reportType" name="ReportType">
                            <option value="daily">Daily</option>
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                        </select>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="m-0 font-weight-bold text-primary">Select Metrics</h6>
                    </div>
                    <div class="card-body">
                        <div class="metric-checkboxes">
                            @{
                                var metricsByCategory = Model.AvailableMetrics.GroupBy(m => m.Category);
                                foreach (var category in metricsByCategory)
                                {
                                    <div class="metric-category">
                                        <h6 class="font-weight-bold">@category.Key</h6>
                                        @foreach (var metric in category)
                                        {
                                            <div class="metric-item">
                                                <input type="checkbox" id="@metric.Id" name="SelectedMetrics" 
                                                       value="@metric.Id" @(metric.IsDefault ? "checked" : "")>
                                                <div>
                                                    <label for="@metric.Id">@metric.Name</label>
                                                    <div class="metric-info">@metric.Description</div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-sync me-2"></i>Generate Report
                    </button>
                    <div class="export-options">
                        <button type="button" class="btn btn-outline-success" onclick="exportReport('excel')">
                            <i class="fas fa-file-excel me-2"></i>Export as Excel
                        </button>
                        <button type="button" class="btn btn-outline-secondary" onclick="exportReport('csv')">
                            <i class="fas fa-file-csv me-2"></i>Export as CSV
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (Model.ReportData != null)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5 class="m-0 font-weight-bold text-primary">Report Results</h5>
                <div class="text-muted small">Generated at: @Model.ReportData.GeneratedAt.ToString("g")</div>
            </div>
            <div class="card-body">
                <div class="report-summary">
                    <h6 class="font-weight-bold">Summary</h6>
                    <div class="row">
                        @foreach (var metric in Model.ReportData.Metrics)
                        {
                            <div class="col-md-3 mb-3">
                                <div class="font-weight-bold">@metric.Key</div>
                                <div>@metric.Value</div>
                            </div>
                        }
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table report-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Category</th>
                                @foreach (var metric in Model.SelectedMetrics)
                                {
                                    <th>@metric.Name</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Model.ReportData.Data)
                            {
                                <tr>
                                    <td>@row.Date.ToString("d")</td>
                                    <td>@row.Category</td>
                                    @foreach (var metric in Model.SelectedMetrics)
                                    {
                                        <td>@(row.Values.ContainsKey(metric.Id) ? row.Values[metric.Id] : "-")</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<div class="loading-overlay">
    <div class="loading-spinner"></div>
</div>

@section Scripts {
    <script>
        function showLoading() {
            document.querySelector('.loading-overlay').style.display = 'flex';
        }

        function hideLoading() {
            document.querySelector('.loading-overlay').style.display = 'none';
        }

        function exportReport(format) {
            const form = document.getElementById('reportForm');
            const formData = new FormData(form);
            formData.append('exportFormat', format);

            showLoading();

            fetch('?handler=Export', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (!response.ok) throw new Error('Export failed');
                return response.blob();
            })
            .then(blob => {
                hideLoading();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `analytics_report.${format}`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                hideLoading();
                alert('Failed to export report. Please try again.');
                console.error('Export error:', error);
            });
        }

        document.getElementById('reportForm').addEventListener('submit', function(e) {
            showLoading();
        });
    </script>
} 