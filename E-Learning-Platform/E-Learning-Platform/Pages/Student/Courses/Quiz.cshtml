@page "{id:int}"
@model E_Learning_Platform.Pages.Student.Courses.QuizModel
@{
    ViewData["Title"] = $"Quiz: {Model.Quiz?.Title}";
    var timeLimit = Model.Quiz?.TimeLimitMinutes;
    var hasTimeLimit = timeLimit.GetValueOrDefault() > 0;
    int remainingSeconds = timeLimit.GetValueOrDefault() * 60;

    if (hasTimeLimit && Model.QuizStartTime.HasValue)
    {
        var elapsedTime = DateTime.Now - Model.QuizStartTime.Value;
        remainingSeconds = Math.Max(0, timeLimit.GetValueOrDefault() * 60 - (int)elapsedTime.TotalSeconds);
    }
}

<div class="quiz-container">
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <nav aria-label="breadcrumb" class="mb-3">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-page="/Student/Dashboard"><i class="bi bi-house-door"></i> Dashboard</a></li>
                    <li class="breadcrumb-item"><a asp-page="/Student/Courses"><i class="bi bi-book"></i> My Courses</a></li>
                    <li class="breadcrumb-item"><a asp-page="/Student/Courses/View" asp-route-id="@Model.CourseId"><i class="bi bi-journal-text"></i> @Model.Quiz?.CourseTitle</a></li>
                    <li class="breadcrumb-item active" aria-current="page"><i class="bi bi-question-circle"></i> @Model.Quiz?.Title</li>
                </ol>
            </nav>
            <h1 class="h2 mb-1 text-primary">@Model.Quiz?.Title</h1>
            <p class="text-muted"><i class="bi bi-collection"></i> Module: @Model.Quiz?.ModuleTitle</p>
        </div>

        @if (hasTimeLimit)
        {
            <div class="quiz-timer card shadow-sm border-danger">
                <div class="card-body p-2 text-center">
                    <h5 class="mb-0 text-danger" id="timer">@(remainingSeconds / 60):@(remainingSeconds % 60 < 10 ? "0" : "")@(remainingSeconds % 60)</h5>
                    <small class="text-danger">Time Remaining</small>
                </div>
            </div>
        }
    </div>

    <div class="card shadow mb-4 border-primary">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="bi bi-info-circle"></i> Quiz Information</h5>
            <span class="badge bg-white text-primary">@Model.Quiz?.Questions.Count Questions</span>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(Model.Quiz?.Description))
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle-fill"></i> @Model.Quiz?.Description
                </div>
            }

            <form method="post" id="quizForm" class="quiz-form">
                <input type="hidden" asp-for="Quiz.QuizId" />
                <input type="hidden" id="timeRemaining" name="TimeRemaining" value="@remainingSeconds" />
                <input type="hidden" id="currentQuestionIndex" name="CurrentQuestionIndex" value="0" />

                <!-- Progress Bar -->
                <div class="progress mb-4" style="height: 10px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                         id="quizProgress" role="progressbar" 
                         style="width: @((1 * 100) / Model.Quiz?.Questions.Count)%"></div>
                </div>

                <!-- Question Display (Single Question) -->
                <div class="quiz-questions">
                    @if (Model.Quiz?.Questions != null && Model.Quiz.Questions.Any())
                    {
                        for (int i = 0; i < Model.Quiz.Questions.Count; i++)
                        {
                            var question = Model.Quiz.Questions[i];
                            <div class="card mb-4 question-card @(i == 0 ? "active" : "d-none")" 
                                data-question-id="@question.QuestionId" 
                                data-question-index="@i">
                                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0 text-primary">Question @(i + 1) of @Model.Quiz?.Questions.Count</h5>
                                    <span class="badge bg-primary">@question.Points points</span>
                                </div>
                                <div class="card-body">
                                    <p class="mb-4 question-text fs-5">@question.Text</p>

                                    <input type="hidden" name="Quiz.Questions[@i].QuestionId" value="@question.QuestionId" />

                                    <div class="options-container">
                                        @if (question.Options != null)
                                        {
                                            for (int j = 0; j < question.Options.Count; j++)
                                            {
                                                var option = question.Options[j];
                                                <div class="form-check option-item p-3 rounded mb-2">
                                                    <input class="form-check-input" type="radio"
                                                        name="Quiz.Questions[@i].SelectedOptionId"
                                                        value="@option.OptionId"
                                                        id="question_@(question.QuestionId)_option_@(option.OptionId)"
                                                        @(option.IsSelected ? "checked" : "") />
                                                    <label class="form-check-label fs-6 ms-2" 
                                                        for="question_@(question.QuestionId)_option_@(option.OptionId)">
                                                        @option.Text
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i> No questions found for this quiz.
                        </div>
                    }
                </div>

                <!-- Question Navigation -->
                @if (Model.Quiz?.Questions != null && Model.Quiz.Questions.Count > 0)
                {
                    <div class="navigation-controls d-flex justify-content-between mt-4">
                        <button type="button" class="btn btn-outline-primary prev-question" disabled>
                            <i class="bi bi-chevron-left"></i> Previous
                        </button>
                        
                        <div class="question-indicator">
                            <div class="question-dots d-flex justify-content-center">
                                @for (int i = 0; i < Model.Quiz.Questions.Count; i++)
                                {
                                    <span class="question-dot @(i == 0 ? "active" : "")" data-index="@i"></span>
                                }
                            </div>
                            <div class="question-counter text-center mt-2">
                                Question <span class="current">1</span> of @(Model.Quiz?.Questions?.Count ?? 0)
                            </div>
                        </div>
                        
                        @if (Model.Quiz?.Questions?.Count > 1)
                        {
                            <button type="button" class="btn btn-primary next-question">
                                Next <i class="bi bi-chevron-right"></i>
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success" id="submitQuizBtn">
                                Submit <i class="bi bi-check-circle"></i>
                            </button>
                        }
                    </div>

                    <!-- Submit Button -->
                    <div class="text-center mt-4 pt-3 border-top">
                        <button type="submit" class="btn btn-success btn-lg" id="mainSubmitBtn">
                            <i class="bi bi-check-circle"></i> Submit Quiz
                        </button>
                        <div id="submitError" class="text-danger mt-2 small d-none">
                            Please answer all questions before submitting
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .quiz-container {
            max-width: 900px;
            margin: 0 auto;
            padding-bottom: 2rem;
        }

        .quiz-timer {
            min-width: 120px;
        }

        .question-card {
            border-left: 4px solid #4e73df;
            transition: all 0.3s ease;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        }

        .question-card:hover {
            transform: translateY(-3px);
        }

        .question-card.border-danger {
            animation: pulseWarning 0.5s ease-in-out;
            border-left: 4px solid #dc3545 !important;
        }

        @@keyframes pulseWarning {
            0% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-5px);
            }

            50% {
                transform: translateX(5px);
            }

            100% {
                transform: translateX(0);
            }
        }

        .options-container {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .option-item {
            padding: 1rem 1.25rem;
            border: 1px solid #e3e6f0;
            border-radius: 0.5rem;
            transition: all 0.3s;
            cursor: pointer;
        }

        .option-item:hover {
            background-color: #f8f9fc;
            border-color: #bac8f3;
            transform: translateX(5px);
        }

        .option-item input[type="radio"]:checked + label {
            font-weight: 600;
        }

        .option-item:has(input[type="radio"]:checked) {
            background-color: #e8f0fe;
            border-color: #4e73df;
            box-shadow: 0 0 0 1px rgba(78, 115, 223, 0.25);
        }

        .navigation-controls {
            align-items: center;
        }

        .question-counter {
            font-weight: 500;
        }

        .question-dots {
            display: flex;
            gap: 8px;
            margin: 0 auto;
        }

        .question-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #e3e6f0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .question-dot:hover {
            background-color: #bac8f3;
        }

        .question-dot.active {
            background-color: #4e73df;
            transform: scale(1.2);
        }

        .question-dot.answered {
            background-color: #1cc88a;
        }

        .progress-bar {
            background-color: #4e73df;
        }

        #submitError {
            transition: all 0.3s ease;
        }

        #mainSubmitBtn {
            opacity: 0.8;
            transition: all 0.3s ease;
        }

        #mainSubmitBtn:hover {
            opacity: 1;
            transform: translateY(-2px);
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const questions = document.querySelectorAll('.question-card');
            const prevBtn = document.querySelector('.prev-question');
            const nextBtn = document.querySelector('.next-question');
            const currentDisplay = document.querySelector('.current');
            const progressBar = document.getElementById('quizProgress');
            const currentIndexInput = document.getElementById('currentQuestionIndex');
            const quizForm = document.getElementById('quizForm');
            const submitError = document.getElementById('submitError');
            const mainSubmitBtn = document.getElementById('mainSubmitBtn');
            const questionDots = document.querySelectorAll('.question-dot');
            let currentIndex = 0;
            let isSubmitting = false;

            // Initialize answered status tracking
            const answeredQuestions = new Set();
            
            // Check for any pre-selected answers on page load
            questions.forEach((question, index) => {
                const hasSelection = question.querySelector('input[type="radio"]:checked');
                if (hasSelection) {
                    answeredQuestions.add(index);
                    questionDots[index].classList.add('answered');
                }
            });
            
            // Update the submit button based on completion status
            function updateSubmitButton() {
                if (answeredQuestions.size === questions.length) {
                    mainSubmitBtn.classList.add('btn-success');
                    mainSubmitBtn.classList.remove('btn-secondary');
                    mainSubmitBtn.disabled = false;
                } else {
                    mainSubmitBtn.classList.add('btn-secondary');
                    mainSubmitBtn.classList.remove('btn-success');
                    mainSubmitBtn.disabled = false; // Allow submission even if not all questions are answered
                }
            }
            
            // Initial update of submit button
            updateSubmitButton();

            function showQuestion(index) {
                questions.forEach((q, i) => {
                    q.classList.toggle('active', i === index);
                    q.classList.toggle('d-none', i !== index);
                });
                
                currentDisplay.textContent = index + 1;
                currentIndexInput.value = index;
                prevBtn.disabled = index === 0;
                
                if (nextBtn) {
                    if (index === questions.length - 1) {
                        nextBtn.textContent = 'Review';
                        nextBtn.innerHTML = 'Review <i class="bi bi-check-square"></i>';
                    } else {
                        nextBtn.textContent = 'Next';
                        nextBtn.innerHTML = 'Next <i class="bi bi-chevron-right"></i>';
                    }
                }
                
                // Update dots
                questionDots.forEach((dot, i) => {
                    dot.classList.toggle('active', i === index);
                });
                
                // Update progress bar
                const progress = ((index + 1) / questions.length) * 100;
                progressBar.style.width = `${progress}%`;
                
                currentIndex = index;
            }

            if (prevBtn) {
                prevBtn.addEventListener('click', () => {
                    if (currentIndex > 0) showQuestion(currentIndex - 1);
                });
            }

            if (nextBtn) {
                nextBtn.addEventListener('click', () => {
                    if (currentIndex < questions.length - 1) {
                        showQuestion(currentIndex + 1);
                    } else {
                        // If on last question, show review modal or submit form
                        if (answeredQuestions.size < questions.length) {
                            const unansweredCount = questions.length - answeredQuestions.size;
                            alert(`You have ${unansweredCount} unanswered question(s). You can still submit, but unanswered questions will be marked as incorrect.`);
                        } else {
                            if (confirm('Are you ready to submit your quiz?')) {
                                quizForm.submit();
                            }
                        }
                    }
                });
            }
            
            // Handle dot navigation
            questionDots.forEach((dot, index) => {
                dot.addEventListener('click', () => {
                    showQuestion(index);
                });
            });

            // Monitor answer selections
            questions.forEach((question, questionIndex) => {
                const options = question.querySelectorAll('input[type="radio"]');
                options.forEach(option => {
                    option.addEventListener('change', () => {
                        answeredQuestions.add(questionIndex);
                        questionDots[questionIndex].classList.add('answered');
                        updateSubmitButton();
                    });
                });
                
                // Make entire option item clickable
                const optionItems = question.querySelectorAll('.option-item');
                optionItems.forEach(item => {
                    item.addEventListener('click', function(e) {
                        if (e.target !== this) return; // Avoid double triggering
                        const radio = this.querySelector('input[type="radio"]');
                        radio.checked = true;
                        
                        // Manually trigger change event
                        const changeEvent = new Event('change');
                        radio.dispatchEvent(changeEvent);
                    });
                });
            });

            // Keyboard navigation
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft' && currentIndex > 0) {
                    showQuestion(currentIndex - 1);
                } else if (e.key === 'ArrowRight' && currentIndex < questions.length - 1) {
                    showQuestion(currentIndex + 1);
                } else if ((e.key === '1' || e.key === '2' || e.key === '3' || e.key === '4') && 
                           questions[currentIndex]) {
                    // Allow number keys 1-4 to select options
                    const optionIndex = parseInt(e.key) - 1;
                    const options = questions[currentIndex].querySelectorAll('input[type="radio"]');
                    if (options[optionIndex]) {
                        options[optionIndex].checked = true;
                        // Manually trigger change event
                        const changeEvent = new Event('change');
                        options[optionIndex].dispatchEvent(changeEvent);
                    }
                }
            });

            // Submit validation
            function validateForm() {
                if (answeredQuestions.size < questions.length) {
                    const unansweredCount = questions.length - answeredQuestions.size;
                    return confirm(`You have ${unansweredCount} unanswered question(s). Do you want to submit anyway? Unanswered questions will be marked as incorrect.`);
                }
                return true;
            }

            // Handle form submission
            quizForm.addEventListener('submit', function(e) {
                if (isSubmitting) {
                    e.preventDefault();
                    return false;
                }

                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }

                isSubmitting = true;
                const submitButtons = document.querySelectorAll('button[type="submit"]');
                submitButtons.forEach(btn => {
                    btn.disabled = true;
                    btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...';
                });
            });

            // Timer functionality
            @if (hasTimeLimit)
            {
                <text>
                let timeLimit = @remainingSeconds;
                let timer = document.getElementById('timer');
                let timeRemainingField = document.getElementById('timeRemaining');
                let timerWarningShown = false;
                
                function submitForm() {
                    if (isSubmitting) return;
                    isSubmitting = true;
                    
                    // Auto-select all unanswered questions with empty value
                    document.querySelectorAll('.question-card input[type="radio"]:not(:checked)').forEach(radio => {
                        radio.disabled = true;
                    });
                    
                    quizForm.submit();
                }

                function updateTimer() {
                    if (timeLimit &lt;= 0) {
                        clearInterval(interval);
                        timer.innerText = "00:00";
                        alert("Time's up! Your quiz will be submitted automatically.");
                        submitForm();
                        return;
                    }

                    // Warning when less than 1 minute remains
                    if (timeLimit &lt;= 60 && !timerWarningShown) {
                        timerWarningShown = true;
                        timer.parentElement.classList.add('bg-danger');
                        timer.classList.add('text-white');
                        
                        // Show warning message
                        const timerCard = timer.closest('.quiz-timer');
                        timerCard.classList.add('animate__animated', 'animate__heartBeat');
                        
                        // Show alert
                        alert("Less than 1 minute remaining!");
                    }

                    let minutes = Math.floor(timeLimit / 60);
                    let seconds = timeLimit % 60;
                        timer.innerText = `${minutes}:${seconds &lt; 10 ? '0' : ''}${seconds}`;
                    timeRemainingField.value = timeLimit;
                    timeLimit--;
                }

                let interval = setInterval(updateTimer, 1000);
                updateTimer();
                </text>
            }
        });
    </script>
}