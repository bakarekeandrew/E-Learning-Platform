@page
@model E_Learning_Platform.Pages.AdminDashboardModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Admin Dashboard";
}

<!-- Toast Container for Notifications -->
<div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

<div class="container-fluid">
    <div class="row">
        <!-- Stats Overview -->
        <div class="col-12">
            <div class="stats-grid">
                <!-- User Statistics -->
                <div class="stat-card">
                    <h3>Total Users</h3>
                    <div class="value">@Model.UserStatistics.TotalUsers</div>
                    <div class="trend">
                        <span class="badge bg-success">Active: @Model.UserStatistics.ActiveUsers</span>
        </div>
    </div>

                <div class="stat-card">
                    <h3>New Users Today</h3>
                    <div class="value">@Model.UserStatistics.NewUsersToday</div>
                    <div class="trend">
                        <span class="badge bg-info">MFA Enabled: @Model.UserStatistics.MfaEnabledUsers</span>
            </div>
                </div>

                <div class="stat-card">
                    <h3>Total Courses</h3>
                    <div class="value">@Model.TotalCourses</div>
                    <div class="trend @Model.GetTrendClass(Model.TotalCourses, Model.PreviousMonthCourses)">
                        @Model.CalculateTrendPercentage(Model.TotalCourses, Model.PreviousMonthCourses)% from last month
                    </div>
                </div>

                <div class="stat-card">
                    <h3>Certificates Issued</h3>
                    <div class="value">@Model.CertificatesIssued</div>
                    <div class="trend @Model.GetTrendClass(Model.CertificatesIssued, Model.PreviousMonthCertificates)">
                        @Model.CalculateTrendPercentage(Model.CertificatesIssued, Model.PreviousMonthCertificates)% from last month
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="col-12">
            <div class="row mt-4">
                <!-- User Activity Chart -->
                <div class="col-lg-8">
                    <div class="card shadow">
                        <div class="card-header">
                            <h5 class="card-title mb-0">User Activity (Last 30 Days)</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="userActivityChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Role Distribution Chart -->
                <div class="col-lg-4">
                    <div class="card shadow">
                        <div class="card-header">
                            <h5 class="card-title mb-0">User Role Distribution</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="roleDistributionChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Users Table -->
        <div class="col-12 mt-4">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="card-title mb-0">Recent Users</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Full Name</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Registered</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model.RecentUsers)
                                {
                                    <tr>
                                        <td>@user.FullName</td>
                                        <td>@user.Username</td>
                                        <td>@user.Email</td>
                                        <td>@user.DateRegistered.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            @if (user.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    </div>
                </div>
            </div>

        <!-- Course Performance -->
        <div class="col-12 mt-4">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="card-title mb-0">Course Performance</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Course Name</th>
                        <th>Students</th>
                        <th>Completion Rate</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in Model.TopCourses)
                    {
                        <tr>
                            <td>@course.CourseName</td>
                            <td>@course.StudentCount students</td>
                                        <td class="@Model.GetCompletionClass(course.CompletionRate)">
                                            @Math.Round(course.CompletionRate)%
                                        </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .stat-card h3 {
            color: #6b7280;
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .stat-card .value {
            font-size: 1.875rem;
            font-weight: 700;
            color: #111827;
            margin-bottom: 0.5rem;
        }

        .stat-card .trend {
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .trend.up { color: #10b981; }
        .trend.down { color: #ef4444; }

        .completion-high { color: #10b981; font-weight: 600; }
        .completion-medium { color: #f59e0b; font-weight: 600; }
        .completion-low { color: #ef4444; font-weight: 600; }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Initialize charts when the document is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize charts
            initializeCharts();
            
            // Initialize SignalR connection
            initializeSignalR();
        });

        function initializeCharts() {
            // User Activity Chart
            const userActivityCtx = document.getElementById('userActivityChart')?.getContext('2d');
            if (userActivityCtx) {
                const userActivityData = @Html.Raw(Json.Serialize(Model.UserActivityData));
                
                new Chart(userActivityCtx, {
                    type: 'line',
                    data: {
                        labels: userActivityData.map(function(d) { return d.date; }),
                        datasets: [{
                            label: 'Daily Logins',
                            data: userActivityData.map(function(d) { return d.loginCount; }),
                            borderColor: '#4f46e5',
                            tension: 0.3,
                            fill: true,
                            backgroundColor: 'rgba(79, 70, 229, 0.1)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            }

            // Role Distribution Chart
            const roleDistributionCtx = document.getElementById('roleDistributionChart')?.getContext('2d');
            if (roleDistributionCtx) {
                const roleData = @Html.Raw(Json.Serialize(Model.UserRoles));
                
                new Chart(roleDistributionCtx, {
                    type: 'doughnut',
                    data: {
                        labels: roleData.map(function(r) { return r.roleName; }),
                        datasets: [{
                            data: roleData.map(function(r) { return r.userCount; }),
                            backgroundColor: [
                                '#4f46e5',
                                '#10b981',
                                '#f59e0b',
                                '#ef4444'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
        }

        function initializeSignalR() {
            try {
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/dashboardHub")
                    .withAutomaticReconnect()
                    .build();

                connection.start()
                    .then(function() { 
                        console.log("SignalR Connected");
                        // Join the dashboard group after successful connection
                        return connection.invoke("JoinDashboardGroup", "admin");
                    })
                    .catch(function(err) { 
                        console.error("SignalR Connection Error:", err);
                    });

                // Handle real-time updates
                connection.on("UpdateActiveUsers", function(count) {
                    const element = document.querySelector('.stat-card:nth-child(1) .value');
                    if (element) {
                        element.textContent = count;
                    }
                });

                connection.on("ReceiveNotification", function(message, type) {
                    showNotification(message, type);
                });

                // Handle connection closed
                connection.onclose(async () => {
                    console.log("SignalR Disconnected - Attempting to reconnect...");
                    try {
                        await connection.start();
                        console.log("SignalR Reconnected");
                        await connection.invoke("JoinDashboardGroup", "admin");
                    } catch (err) {
                        console.error("SignalR Reconnection Error:", err);
                    }
                });
            } catch (err) {
                console.error("SignalR Initialization Error:", err);
            }
        }

        function showNotification(message, type) {
            // You can implement a toast notification system here
            console.log(type + ": " + message);
            // Example: Use Bootstrap toast or other notification library
            if (typeof bootstrap !== 'undefined') {
                const toastContainer = document.getElementById('toastContainer');
                if (toastContainer) {
                    const toast = document.createElement('div');
                    toast.className = `toast align-items-center text-white bg-${type} border-0`;
                    toast.setAttribute('role', 'alert');
                    toast.setAttribute('aria-live', 'assertive');
                    toast.setAttribute('aria-atomic', 'true');
                    
                    toast.innerHTML = `
                        <div class="d-flex">
                            <div class="toast-body">
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    `;
                    
                    toastContainer.appendChild(toast);
                    const bsToast = new bootstrap.Toast(toast);
                    bsToast.show();
                    
                    // Remove toast after it's hidden
                    toast.addEventListener('hidden.bs.toast', function() {
                        toast.remove();
                    });
                }
            }
        }
    </script>
}