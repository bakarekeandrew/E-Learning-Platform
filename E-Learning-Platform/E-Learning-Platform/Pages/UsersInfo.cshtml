@page
@using System.Security.Claims
@model E_Learning_Platform.Pages.UsersInfoModel
@using E_Learning_Platform.Services
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "User Management";
}

@section Styles {
    <style>
        /* Custom styles for Users page */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .content-card {
            background: #ffffff;
            border-radius: 0.75rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .content-card-header {
            padding-bottom: 1rem;
            border-bottom: 1px solid #eaecf4;
            margin-bottom: 1rem;
        }

        .content-card-title {
            font-size: 1.1rem;
            font-weight: 700;
            color: #3a3b45;
            margin: 0;
        }

        .table thead th {
            background-color: #f8fafc;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.05em;
            color: #6b7280;
            padding: 1rem;
        }

        .table tbody td {
            padding: 1rem;
            vertical-align: middle;
        }

        .badge {
            font-weight: 500;
            padding: 0.5em 0.75em;
        }

        .btn-group .btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }

        .nav-tabs {
            border-bottom: 1px solid #e5e7eb;
            margin-bottom: 1.5rem;
        }

        .nav-tabs .nav-link {
            border: none;
            color: #6b7280;
            padding: 0.75rem 1rem;
            font-weight: 500;
            margin-right: 1rem;
        }

        .nav-tabs .nav-link:hover {
            color: #4e73df;
            border: none;
            border-bottom: 2px solid #e5e7eb;
        }

        .nav-tabs .nav-link.active {
            color: #4e73df;
            border: none;
            border-bottom: 2px solid #4e73df;
            background: transparent;
        }

        .form-control:focus {
            border-color: #4e73df;
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
        }
    </style>
}

<!-- Main Content -->
<div class="container-fluid">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/AdminDashboard">Dashboard</a></li>
            <li class="breadcrumb-item active">Users</li>
        </ol>
    </nav>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <strong>Success!</strong> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            <strong>Error:</strong> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="content-card">
        <div class="content-card-header d-flex justify-content-between align-items-center">
            <h5 class="content-card-title">User Information</h5>
            <div class="d-flex">
                @if (Model.CanViewUsers)
                {
                    <form method="get" class="me-2">
                        <div class="input-group">
                            <input type="text" name="searchTerm" class="form-control" placeholder="Search users" value="@Model.Filters.SearchTerm">
                            <button class="btn btn-outline-secondary" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                            <input type="hidden" name="roleFilter" value="@Model.Filters.RoleFilter">
                            <input type="hidden" name="statusFilter" value="@Model.Filters.StatusFilter">
                            <input type="hidden" name="tab" value="@Model.Filters.CurrentTab">
                        </div>
                    </form>
                }
                @if (Model.CanCreateUsers)
                {
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#userModal" id="addUserBtn">
                        <i class="fas fa-plus"></i> Add User
                    </button>
                }
            </div>
        </div>

        @if (Model.CanViewUsers)
        {
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @(Model.Filters.CurrentTab == "all" ? "active" : "")"
                       href="?tab=all&pageNumber=1">All Users</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Model.Filters.CurrentTab == "instructor" ? "active" : "")"
                       href="?tab=instructor&pageNumber=1">Instructors</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Model.Filters.CurrentTab == "student" ? "active" : "")"
                       href="?tab=student&pageNumber=1">Students</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Model.Filters.CurrentTab == "admin" ? "active" : "")"
                       href="?tab=admin&pageNumber=1">Admins</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Model.Filters.CurrentTab == "audit" ? "active" : "")"
                       href="?tab=audit&pageNumber=1">Audit Log</a>
                </li>
            </ul>

            @if (Model.Filters.CurrentTab == "audit")
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>User</th>
                                <th>Action</th>
                                <th>Changed By</th>
                                <th>Reason</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model.AuditLogs)
                            {
                                <tr>
                                    <td>@log.ChangeDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@log.UserName</td>
                                    <td>@log.Action</td>
                                    <td>@log.ChangedByName</td>
                                    <td>@log.Reason</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="mb-4">
                    <form method="get" class="row g-3">
                        <div class="col-md-4">
                            <select name="roleFilter" class="form-select" onchange="this.form.submit()">
                                <option value="">Filter by role</option>
                                @foreach (var role in Model.RoleOptions)
                                {
                                    <option value="@role.Text" selected="@(Model.Filters.RoleFilter == role.Text)">@role.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select name="statusFilter" class="form-select" onchange="this.form.submit()">
                                <option value="">Filter by status</option>
                                <option value="active" selected="@(Model.Filters.StatusFilter == "active")">Active</option>
                                <option value="inactive" selected="@(Model.Filters.StatusFilter == "inactive")">Inactive</option>
                            </select>
                        </div>
                        <input type="hidden" name="searchTerm" value="@Model.Filters.SearchTerm">
                        <input type="hidden" name="tab" value="@Model.Filters.CurrentTab">
                    </form>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Status</th>
                                @if (Model.CanManageUsers)
                                {
                                    <th>Actions</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Users.Any())
                            {
                                @foreach (var user in Model.Users)
                                {
                                    <tr>
                                        <td><strong>@user.FullName</strong></td>
                                        <td>@user.Email</td>
                                        <td>@user.RoleName</td>
                                        <td>
                                            <span class="badge rounded-pill bg-@(user.IsActive ? "success" : "secondary")">
                                                @(user.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td class="text-end">
                                            <div class="btn-group">
                                                @if (Model.CanEditUsers)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary edit-user" 
                                                            data-userid="@user.UserId"
                                                            data-bs-toggle="modal" 
                                                            data-bs-target="#userModal">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                }
                                                @if (Model.CanManageUsers)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            onclick="showPermissionsModal(@user.UserId, '@user.FullName')"
                                                            id="managePermissionsBtn_@user.UserId">
                                                        <i class="fas fa-key"></i> Manage Permissions
                                                    </button>
                                                }
                                                @if (Model.CanDeleteUsers)
                                                {
                                                    <button class="btn btn-sm btn-outline-danger delete-user" 
                                                            data-userid="@user.UserId">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="@(Model.CanManageUsers ? 5 : 4)" class="text-center py-5 text-muted">
                                        <i class="fas fa-inbox fa-3x mb-3"></i>
                                        <p class="mb-0">No users found matching your criteria.</p>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (Model.Pagination.TotalPages > 1)
                {
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div>
                            @if (Model.Pagination.TotalItems > 0)
                            {
                                <p class="text-muted mb-0">
                                    Showing @((Model.Pagination.CurrentPage - 1) * Model.Pagination.PageSize + 1)-@(Math.Min(Model.Pagination.CurrentPage * Model.Pagination.PageSize, Model.Pagination.TotalItems)) of @Model.Pagination.TotalItems
                                </p>
                            }
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination mb-0">
                                <li class="page-item @(Model.Pagination.CurrentPage > 1 ? "" : "disabled")">
                                    <a class="page-link" href="?searchTerm=@Model.Filters.SearchTerm&roleFilter=@Model.Filters.RoleFilter&statusFilter=@Model.Filters.StatusFilter&tab=@Model.Filters.CurrentTab&pageNumber=@(Model.Pagination.CurrentPage - 1)">
                                        Previous
                                    </a>
                                </li>

                                @for (int i = Math.Max(1, Model.Pagination.CurrentPage - 2); i <= Math.Min(Model.Pagination.TotalPages, Model.Pagination.CurrentPage + 2); i++)
                                {
                                    <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="?searchTerm=@Model.Filters.SearchTerm&roleFilter=@Model.Filters.RoleFilter&statusFilter=@Model.Filters.StatusFilter&tab=@Model.Filters.CurrentTab&pageNumber=@i">
                                            @i
                                        </a>
                                    </li>
                                }

                                <li class="page-item @(Model.Pagination.CurrentPage < Model.Pagination.TotalPages ? "" : "disabled")">
                                    <a class="page-link" href="?searchTerm=@Model.Filters.SearchTerm&roleFilter=@Model.Filters.RoleFilter&statusFilter=@Model.Filters.StatusFilter&tab=@Model.Filters.CurrentTab&pageNumber=@(Model.Pagination.CurrentPage + 1)">
                                        Next
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            }
        }
        else
        {
            <div class="alert alert-warning">
                You do not have permission to view users.
            </div>
        }
    </div>
</div>

@if (Model.CanCreateUsers || Model.CanEditUsers)
{
    <!-- User Modal -->
    <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userModalLabel">Add New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form method="post" id="userForm">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <input type="hidden" asp-for="UserInput.UserId" value="0" />
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="mb-3">
                            <label asp-for="UserInput.FullName" class="form-label">Full Name</label>
                            <input asp-for="UserInput.FullName" class="form-control" />
                            <span asp-validation-for="UserInput.FullName" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="UserInput.Email" class="form-label">Email</label>
                            <input asp-for="UserInput.Email" class="form-control" />
                            <span asp-validation-for="UserInput.Email" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="UserInput.Password" class="form-label">Password</label>
                            <input asp-for="UserInput.Password" type="password" class="form-control" />
                            <span asp-validation-for="UserInput.Password" class="text-danger"></span>
                            <small id="passwordHelp" class="form-text text-muted">Password must be at least 6 characters</small>
                        </div>

                        <div class="mb-3">
                            <label asp-for="UserInput.RoleId" class="form-label">Role</label>
                            <select asp-for="UserInput.RoleId" asp-items="Model.RoleOptions" class="form-select">
                                <option value="">Select a role</option>
                            </select>
                            <span asp-validation-for="UserInput.RoleId" class="text-danger"></span>
                        </div>

                        <div class="form-check mb-3">
                            <input asp-for="UserInput.IsActive" class="form-check-input" />
                            <label asp-for="UserInput.IsActive" class="form-check-label">Active</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="saveUserBtn">Save User</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (Model.CanManageUsers)
{
    <!-- Permissions Modal -->
    <div class="modal fade" id="permissionsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage User Permissions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Current Permissions</h6>
                            <div id="currentPermissions"></div>
                        </div>
                        <div class="col-md-6">
                            <h6>Available Permissions</h6>
                            <div class="mb-3">
                                <select class="form-select" id="permissionSelect">
                                    <option value="">Select Permission</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <input type="text" class="form-control" id="assignReason" 
                                       placeholder="Reason for assigning permission">
                            </div>
                            <button class="btn btn-primary" onclick="assignPermission()">
                                Assign Permission
                            </button>
                        </div>
                    </div>
                    <hr>
                    <h6>Permission History</h6>
                    <div id="permissionHistory"></div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @if (Model.CanManageUsers)
    {
        <script>
            let selectedUserId = null;

            function showPermissionsModal(userId, userName) {
                selectedUserId = userId;
                $('#permissionsModal').modal('show');
                loadUserPermissions(userId, userName);
            }

            function loadUserPermissions(userId, userName) {
                // Show loading state
                $('#currentPermissions, #permissionHistory').html('<div class="text-center"><div class="spinner-border" role="status"></div></div>');
                $('#permissionSelect').prop('disabled', true);
                
                // Load permissions data
                $.get(`?handler=LoadPermissions&userId=${userId}`)
                    .done(function(data) {
                        if (!data) {
                            showError('Failed to load permissions data');
                            return;
                        }
                        if (data.error) {
                            showError(data.error);
                            return;
                        }
                        
                        // Update current permissions
                        let currentPermissionsHtml = '<div class="list-group">';
                        if (data.currentPermissions && data.currentPermissions.length > 0) {
                            data.currentPermissions.forEach(permission => {
                                currentPermissionsHtml += `
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>${permission.permissionName}</strong>
                                            <br>
                                            <small class="text-muted">
                                                Assigned by ${permission.assignedByName} on 
                                                ${new Date(permission.assignedDate).toLocaleDateString()}
                                            </small>
                                        </div>
                                        <button class="btn btn-sm btn-danger" onclick="revokePermission(${userId}, ${permission.permissionId})">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>`;
                            });
                        } else {
                            currentPermissionsHtml += '<div class="list-group-item text-center text-muted">No permissions assigned</div>';
                        }
                        currentPermissionsHtml += '</div>';
                        $('#currentPermissions').html(currentPermissionsHtml);
                        
                        // Update available permissions dropdown
                        let permissionSelectHtml = '<option value="">Select Permission</option>';
                        if (data.availablePermissions && data.availablePermissions.length > 0) {
                            data.availablePermissions.forEach(permission => {
                                permissionSelectHtml += `
                                    <option value="${permission.permissionId}">
                                        ${permission.permissionName}${permission.description ? ` - ${permission.description}` : ''}
                                    </option>`;
                            });
                            $('#permissionSelect').prop('disabled', false);
                        } else {
                            permissionSelectHtml += '<option value="" disabled>No available permissions</option>';
                        }
                        $('#permissionSelect').html(permissionSelectHtml);
                        
                        // Update permission history
                        let historyHtml = '<div class="table-responsive"><table class="table table-sm">';
                        historyHtml += `
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Permission</th>
                                    <th>Action</th>
                                    <th>Changed By</th>
                                    <th>Reason</th>
                                </tr>
                            </thead>
                            <tbody>`;
                        
                        if (data.permissionHistory && data.permissionHistory.length > 0) {
                            data.permissionHistory.forEach(entry => {
                                historyHtml += `
                                    <tr>
                                        <td>${new Date(entry.changeDate).toLocaleString()}</td>
                                        <td>${entry.permissionName}</td>
                                        <td>
                                            <span class="badge bg-${entry.changeType === 'GRANT' ? 'success' : 'danger'}">
                                                ${entry.changeType}
                                            </span>
                                        </td>
                                        <td>${entry.changedByName}</td>
                                        <td>${entry.reason || ''}</td>
                                    </tr>`;
                            });
                        } else {
                            historyHtml += '<tr><td colspan="5" class="text-center text-muted">No permission history found</td></tr>';
                        }
                        historyHtml += '</tbody></table></div>';
                        $('#permissionHistory').html(historyHtml);
                    })
                    .fail(function(xhr) {
                        console.error('Error loading permissions:', xhr);
                        showError('Error loading permissions. Please try again later.');
                    });
            }

            function assignPermission() {
                const permissionId = $('#permissionSelect').val();
                const reason = $('#assignReason').val().trim();
                
                // Clear any previous error messages
                $('.alert').remove();
                
                if (!permissionId) {
                    showError('Please select a permission to assign');
                    return;
                }
                
                if (!reason) {
                    showError('Please provide a reason for assigning the permission');
                    return;
                }
                
                // Show loading state
                const assignButton = $('button[onclick="assignPermission()"]');
                const originalText = assignButton.html();
                assignButton.html('<i class="fas fa-spinner fa-spin"></i> Assigning...').prop('disabled', true);
                
                $.post('?handler=AssignPermission', {
                    userId: selectedUserId,
                    permissionId: permissionId,
                    reason: reason,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function(response) {
                    if (response.success) {
                        showSuccess(response.message || 'Permission assigned successfully');
                        $('#permissionSelect').val('');
                        $('#assignReason').val('');
                        loadUserPermissions(selectedUserId);
                    } else {
                        showError(response.error || 'Failed to assign permission');
                    }
                })
                .fail(function(xhr) {
                    console.error('Error assigning permission:', xhr);
                    showError('Error assigning permission. Please try again later.');
                })
                .always(function() {
                    // Reset button state
                    assignButton.html(originalText).prop('disabled', false);
                });
            }

            function showError(message) {
                const alertHtml = `
                    <div class="alert alert-danger alert-dismissible fade show mb-3">
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        <i class="fas fa-exclamation-circle"></i> ${message}
                    </div>`;
                $('.modal-body').prepend(alertHtml);
            }

            function showSuccess(message) {
                const alertHtml = `
                    <div class="alert alert-success alert-dismissible fade show mb-3">
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        <i class="fas fa-check-circle"></i> ${message}
                    </div>`;
                $('.modal-body').prepend(alertHtml);
            }

            function revokePermission(userId, permissionId) {
                if (!confirm('Are you sure you want to revoke this permission?')) {
                    return;
                }
                
                $.post('?handler=RevokePermission', {
                    userId: userId,
                    permissionId: permissionId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function(response) {
                    if (response.success) {
                        loadUserPermissions(userId);
                    } else {
                        alert(response.error || 'Failed to revoke permission');
                    }
                })
                .fail(function(xhr) {
                    console.error('Error revoking permission:', xhr);
                    alert('Error revoking permission. Please try again later.');
                });
            }
        </script>
    }

    @if (await Model.HasPermissionAsync("USER.CREATE") || 
         await Model.HasPermissionAsync("USER.EDIT") || 
         await Model.HasPermissionAsync("USER.DELETE"))
    {
        <script>
            $(document).ready(function() {
                // Handle edit user button click
                $('.edit-user').click(function() {
                    const userId = $(this).data('userid');
                    $('#userModalLabel').text('Edit User');
                    $('#saveUserBtn').text('Update User');
                    $('#userForm').attr('action', '?handler=Update');

                    // Fetch user data via AJAX
                    $.get(`?handler=UserById&userId=${userId}`, function(data) {
                        if (data.error) {
                            alert(data.error);
                            return;
                        }
                        $('#UserInput_UserId').val(data.userId);
                        $('#UserInput_FullName').val(data.fullName);
                        $('#UserInput_Email').val(data.email);
                        $('#UserInput_RoleId').val(data.roleId);
                        $('#UserInput_IsActive').prop('checked', data.isActive);
                        $('#UserInput_Password').val('').removeAttr('required');
                        $('#passwordHelp').text('Leave blank to keep current password');
                    }).fail(function() {
                        alert('Failed to load user data');
                    });
                });

                // Handle add user button click
                $('#addUserBtn').click(function() {
                    $('#userModalLabel').text('Add New User');
                    $('#saveUserBtn').text('Save User');
                    $('#userForm').attr('action', '?handler=Add');
                    $('#userForm')[0].reset();
                    $('#UserInput_UserId').val(0);
                    $('#UserInput_Password').attr('required', 'required');
                    $('#passwordHelp').text('Password must be at least 6 characters');
                });

                // Handle form submission
                $('#userForm').submit(function(e) {
                    e.preventDefault();
                    var form = $(this);
                    $.ajax({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.redirect) {
                                window.location.href = response.redirect;
                            } else {
                                window.location.reload();
                            }
                        },
                        error: function(xhr) {
                            alert('Error: ' + xhr.responseText);
                        }
                    });
                });

                // Handle delete user
                $('.delete-user').click(function() {
                    if (confirm('Are you sure you want to delete this user?')) {
                        var userId = $(this).data('userid');
                        $.post('?handler=Delete',
                            {
                                userId: userId,
                                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                            },
                            function(response) {
                                if (response.redirect) {
                                    window.location.href = response.redirect;
                                } else {
                                    window.location.reload();
                                }
                            }
                        ).fail(function(xhr) {
                            alert('Error: ' + xhr.responseText);
                        });
                    }
                });

                // Handle status toggle
                $('.toggle-status').click(function() {
                    const button = $(this);
                    const userId = button.data('userid');
                    const currentStatus = button.data('current-status') === 'true';

                    if (confirm('Are you sure you want to ' + (currentStatus ? 'deactivate' : 'activate') + ' this user?')) {
                        $.post('?handler=ToggleStatus', {
                            userId: userId,
                            currentStatus: currentStatus,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        })
                        .done(function(response) {
                            if (response.success) {
                                // Update button appearance
                                button.data('current-status', response.newStatus);
                                button
                                    .removeClass('btn-outline-warning btn-outline-success')
                                    .addClass(response.newStatus ? 'btn-outline-warning' : 'btn-outline-success');
                                button.find('i')
                                    .removeClass('fa-play fa-pause')
                                    .addClass(response.newStatus ? 'fa-pause' : 'fa-play');

                                // Update status badge in the row
                                const statusBadge = button.closest('tr').find('.badge');
                                statusBadge
                                    .removeClass('bg-success bg-secondary')
                                    .addClass(response.newStatus ? 'bg-success' : 'bg-secondary')
                                    .text(response.newStatus ? 'Active' : 'Inactive');

                                // Show success message
                                showAlert('success', 'Status updated successfully');
                            } else {
                                showAlert('danger', response.message || 'Failed to update status');
                            }
                        })
                        .fail(function() {
                            showAlert('danger', 'An error occurred while updating status');
                        });
                    }
                });

                // Helper function to show alerts
                function showAlert(type, message) {
                    const alertHtml = `
                        <div class="alert alert-${type} alert-dismissible fade show">
                            <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>`;
                    
                    // Remove any existing alerts
                    $('.alert').remove();
                    
                    // Add new alert at the top of the content
                    $('.content-card').before(alertHtml);

                    // Auto-hide after 5 seconds
                    setTimeout(function() {
                        $('.alert').alert('close');
                    }, 5000);
                }
            });
        </script>
    }
}