-- Add missing columns to USER_PERMISSIONS table
IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE object_id = OBJECT_ID('USER_PERMISSIONS') AND name = 'ASSIGNED_BY')
BEGIN
    ALTER TABLE USER_PERMISSIONS
    ADD ASSIGNED_BY INT NULL,
    CONSTRAINT FK_USER_PERMISSIONS_ASSIGNED_BY FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID)
END;

-- Add missing columns to PERMISSION_AUDIT_LOG table
IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE object_id = OBJECT_ID('PERMISSION_AUDIT_LOG') AND name = 'CHANGE_TYPE')
BEGIN
    ALTER TABLE PERMISSION_AUDIT_LOG
    ADD CHANGE_TYPE VARCHAR(20) NOT NULL DEFAULT 'GRANT',
    CHANGE_REASON NVARCHAR(500) NULL,
    CONSTRAINT CHK_PERMISSION_AUDIT_LOG_CHANGE_TYPE CHECK (CHANGE_TYPE IN ('GRANT', 'REVOKE'))
END;

-- Add missing columns to ROLE_PERMISSIONS table if not exists
IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE object_id = OBJECT_ID('ROLE_PERMISSIONS') AND name = 'ASSIGNED_BY')
BEGIN
    ALTER TABLE ROLE_PERMISSIONS
    ADD ASSIGNED_BY INT NULL,
    ASSIGNED_DATE DATETIME NOT NULL DEFAULT GETDATE(),
    CONSTRAINT FK_ROLE_PERMISSIONS_ASSIGNED_BY FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID)
END;

-- Create ROLE_PERMISSION_AUDIT table if not exists
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID('ROLE_PERMISSION_AUDIT') AND type = 'U')
BEGIN
    CREATE TABLE ROLE_PERMISSION_AUDIT (
        AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
        ROLE_ID INT NOT NULL,
        PERMISSION_ID INT NOT NULL,
        ASSIGNED_BY INT NULL,
        CHANGE_TYPE VARCHAR(20) NOT NULL,
        CHANGE_REASON NVARCHAR(500) NULL,
        CHANGE_DATE DATETIME NOT NULL DEFAULT GETDATE(),
        CONSTRAINT FK_ROLE_PERMISSION_AUDIT_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID),
        CONSTRAINT FK_ROLE_PERMISSION_AUDIT_PERMISSION FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(PERMISSION_ID),
        CONSTRAINT FK_ROLE_PERMISSION_AUDIT_USER FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID),
        CONSTRAINT CHK_ROLE_PERMISSION_AUDIT_CHANGE_TYPE CHECK (CHANGE_TYPE IN ('GRANT', 'REVOKE'))
    )
END; 