-- Create ROLES table if it doesn't exist
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID('ROLES') AND type = 'U')
BEGIN
    CREATE TABLE ROLES (
        ROLE_ID INT IDENTITY(1,1) PRIMARY KEY,
        ROLE_NAME NVARCHAR(100) NOT NULL UNIQUE,
        DESCRIPTION NVARCHAR(500),
        CREATED_DATE DATETIME DEFAULT GETDATE(),
        CREATED_BY INT,
        IS_SYSTEM BIT DEFAULT 0,
        FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID)
    );
END;

-- Create USER_ROLES table if it doesn't exist
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID('USER_ROLES') AND type = 'U')
BEGIN
    CREATE TABLE USER_ROLES (
        USER_ID INT NOT NULL,
        ROLE_ID INT NOT NULL,
        ASSIGNED_DATE DATETIME DEFAULT GETDATE(),
        ASSIGNED_BY INT,
        PRIMARY KEY (USER_ID, ROLE_ID),
        FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
        FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID),
        FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID)
    );
END;

-- Create ROLE_PERMISSIONS table if it doesn't exist
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID('ROLE_PERMISSIONS') AND type = 'U')
BEGIN
    CREATE TABLE ROLE_PERMISSIONS (
        ROLE_ID INT NOT NULL,
        PERMISSION_ID INT NOT NULL,
        ASSIGNED_DATE DATETIME DEFAULT GETDATE(),
        ASSIGNED_BY INT,
        PRIMARY KEY (ROLE_ID, PERMISSION_ID),
        FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID),
        FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(PERMISSION_ID),
        FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID)
    );
END;

-- Create ROLE_AUDIT_LOG table if it doesn't exist
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID('ROLE_AUDIT_LOG') AND type = 'U')
BEGIN
    CREATE TABLE ROLE_AUDIT_LOG (
        LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
        ROLE_ID INT NOT NULL,
        USER_ID INT,
        CHANGE_TYPE VARCHAR(20) NOT NULL CHECK (CHANGE_TYPE IN ('CREATE', 'UPDATE', 'DELETE', 'ASSIGN', 'UNASSIGN')),
        CHANGE_DESCRIPTION NVARCHAR(500),
        CHANGED_BY INT NOT NULL,
        CHANGE_DATE DATETIME DEFAULT GETDATE(),
        FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID),
        FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
        FOREIGN KEY (CHANGED_BY) REFERENCES USERS(USER_ID)
    );
END;

-- Insert default roles if they don't exist
IF NOT EXISTS (SELECT 1 FROM ROLES WHERE ROLE_NAME = 'Admin')
BEGIN
    INSERT INTO ROLES (ROLE_NAME, DESCRIPTION, IS_SYSTEM) 
    VALUES ('Admin', 'Full system access', 1);
END;

IF NOT EXISTS (SELECT 1 FROM ROLES WHERE ROLE_NAME = 'Instructor')
BEGIN
    INSERT INTO ROLES (ROLE_NAME, DESCRIPTION, IS_SYSTEM) 
    VALUES ('Instructor', 'Course management access', 1);
END;

IF NOT EXISTS (SELECT 1 FROM ROLES WHERE ROLE_NAME = 'Student')
BEGIN
    INSERT INTO ROLES (ROLE_NAME, DESCRIPTION, IS_SYSTEM) 
    VALUES ('Student', 'Course access', 1);
END; 