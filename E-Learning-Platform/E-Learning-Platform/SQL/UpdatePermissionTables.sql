-- Add ASSIGNED_BY column to USER_PERMISSIONS table
IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE object_id = OBJECT_ID('USER_PERMISSIONS') AND name = 'ASSIGNED_BY')
BEGIN
    ALTER TABLE USER_PERMISSIONS
    ADD ASSIGNED_BY INT,
    CONSTRAINT FK_USER_PERMISSIONS_ASSIGNED_BY FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID);
END;

-- Rename GRANTED_DATE to ASSIGNED_DATE in USER_PERMISSIONS for consistency
IF EXISTS (SELECT 1 FROM sys.columns WHERE object_id = OBJECT_ID('USER_PERMISSIONS') AND name = 'GRANTED_DATE')
BEGIN
    EXEC sp_rename 'USER_PERMISSIONS.GRANTED_DATE', 'ASSIGNED_DATE', 'COLUMN';
END;

-- Create PERMISSION_AUDIT_LOG table if it doesn't exist
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID('PERMISSION_AUDIT_LOG') AND type = 'U')
BEGIN
    CREATE TABLE PERMISSION_AUDIT_LOG (
        LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
        USER_ID INT NOT NULL,
        PERMISSION_ID INT NOT NULL,
        ASSIGNED_BY INT NOT NULL,
        CHANGE_TYPE VARCHAR(10) NOT NULL CHECK (CHANGE_TYPE IN ('GRANT', 'REVOKE')),
        CHANGE_REASON NVARCHAR(500),
        CHANGE_DATE DATETIME DEFAULT GETDATE(),
        FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
        FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(PERMISSION_ID),
        FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(USER_ID)
    );
END; 