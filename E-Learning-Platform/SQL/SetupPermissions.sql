-- Create User Management Category
IF NOT EXISTS (SELECT 1 FROM PERMISSION_CATEGORIES WHERE CATEGORY_NAME = 'User Management')
BEGIN
    INSERT INTO PERMISSION_CATEGORIES (CATEGORY_NAME, DESCRIPTION)
    VALUES ('User Management', 'Permissions related to user management and access control');
END

DECLARE @CategoryId INT;
SELECT @CategoryId = CATEGORY_ID FROM PERMISSION_CATEGORIES WHERE CATEGORY_NAME = 'User Management';

-- Create Basic Permissions
IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.VIEW')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.VIEW', 'View user information', @CategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.MANAGE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.MANAGE', 'Manage user accounts', @CategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.CREATE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.CREATE', 'Create new user accounts', @CategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.EDIT')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.EDIT', 'Edit existing user accounts', @CategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.DELETE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.DELETE', 'Delete user accounts', @CategoryId, GETDATE());
END

-- Set up Permission Hierarchy
DECLARE @UserManageId INT, @UserCreateId INT, @UserEditId INT, @UserDeleteId INT;

SELECT @UserManageId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.MANAGE';
SELECT @UserCreateId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.CREATE';
SELECT @UserEditId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.EDIT';
SELECT @UserDeleteId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.DELETE';

-- USER.MANAGE is parent of all other user-related permissions
IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @UserManageId AND CHILD_PERMISSION_ID = @UserCreateId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@UserManageId, @UserCreateId);
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @UserManageId AND CHILD_PERMISSION_ID = @UserEditId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@UserManageId, @UserEditId);
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @UserManageId AND CHILD_PERMISSION_ID = @UserDeleteId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@UserManageId, @UserDeleteId);
END

-- Grant permissions to admin role
DECLARE @AdminRoleId INT;
SELECT @AdminRoleId = ROLE_ID FROM ROLES WHERE ROLE_NAME = 'ADMIN';

IF @AdminRoleId IS NOT NULL
BEGIN
    -- Grant USER.MANAGE (which includes all child permissions)
    IF NOT EXISTS (SELECT 1 FROM ROLE_PERMISSIONS WHERE ROLE_ID = @AdminRoleId AND PERMISSION_ID = @UserManageId)
    BEGIN
        INSERT INTO ROLE_PERMISSIONS (ROLE_ID, PERMISSION_ID, ASSIGNED_BY, ASSIGNED_DATE)
        VALUES (@AdminRoleId, @UserManageId, 1, GETDATE()); -- Assuming ID 1 is the system admin
    END
END

-- Log the setup in audit log
INSERT INTO PERMISSION_AUDIT_LOG (USER_ID, PERMISSION_ID, ACTION, CHANGED_BY, CHANGE_DATE, REASON)
SELECT 1, PERMISSION_ID, 'SETUP', 'SYSTEM', GETDATE(), 'Initial permission setup'
FROM PERMISSIONS
WHERE CATEGORY_ID = @CategoryId;

GO 