-- Create Permission Categories
IF NOT EXISTS (SELECT 1 FROM PERMISSION_CATEGORIES WHERE CATEGORY_NAME = 'User Management')
BEGIN
    INSERT INTO PERMISSION_CATEGORIES (CATEGORY_NAME, DESCRIPTION)
    VALUES ('User Management', 'Permissions related to user management and access control');
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_CATEGORIES WHERE CATEGORY_NAME = 'Course Management')
BEGIN
    INSERT INTO PERMISSION_CATEGORIES (CATEGORY_NAME, DESCRIPTION)
    VALUES ('Course Management', 'Permissions related to course management');
END

-- Get Category IDs
DECLARE @UserCategoryId INT, @CourseCategoryId INT;
SELECT @UserCategoryId = CATEGORY_ID FROM PERMISSION_CATEGORIES WHERE CATEGORY_NAME = 'User Management';
SELECT @CourseCategoryId = CATEGORY_ID FROM PERMISSION_CATEGORIES WHERE CATEGORY_NAME = 'Course Management';

-- Create User Management Permissions
IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.VIEW')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.VIEW', 'View user information', @UserCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.MANAGE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.MANAGE', 'Manage user accounts (Parent permission)', @UserCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.CREATE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.CREATE', 'Create new user accounts', @UserCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.EDIT')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.EDIT', 'Edit existing user accounts', @UserCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.DELETE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('USER.DELETE', 'Delete user accounts', @UserCategoryId, GETDATE());
END

-- Create Course Management Permissions
IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.VIEW')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('COURSE.VIEW', 'View course information', @CourseCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.MANAGE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('COURSE.MANAGE', 'Manage courses (Parent permission)', @CourseCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.CREATE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('COURSE.CREATE', 'Create new courses', @CourseCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.EDIT')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('COURSE.EDIT', 'Edit existing courses', @CourseCategoryId, GETDATE());
END

IF NOT EXISTS (SELECT 1 FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.DELETE')
BEGIN
    INSERT INTO PERMISSIONS (PERMISSION_NAME, DESCRIPTION, CATEGORY_ID, CREATED_DATE)
    VALUES ('COURSE.DELETE', 'Delete courses', @CourseCategoryId, GETDATE());
END

-- Set up Permission Hierarchy for Users
DECLARE @UserManageId INT, @UserCreateId INT, @UserEditId INT, @UserDeleteId INT;
SELECT @UserManageId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.MANAGE';
SELECT @UserCreateId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.CREATE';
SELECT @UserEditId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.EDIT';
SELECT @UserDeleteId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'USER.DELETE';

-- USER.MANAGE is parent of all other user-related permissions
IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @UserManageId AND CHILD_PERMISSION_ID = @UserCreateId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@UserManageId, @UserCreateId);
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @UserManageId AND CHILD_PERMISSION_ID = @UserEditId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@UserManageId, @UserEditId);
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @UserManageId AND CHILD_PERMISSION_ID = @UserDeleteId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@UserManageId, @UserDeleteId);
END

-- Set up Permission Hierarchy for Courses
DECLARE @CourseManageId INT, @CourseCreateId INT, @CourseEditId INT, @CourseDeleteId INT;
SELECT @CourseManageId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.MANAGE';
SELECT @CourseCreateId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.CREATE';
SELECT @CourseEditId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.EDIT';
SELECT @CourseDeleteId = PERMISSION_ID FROM PERMISSIONS WHERE PERMISSION_NAME = 'COURSE.DELETE';

-- COURSE.MANAGE is parent of all other course-related permissions
IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @CourseManageId AND CHILD_PERMISSION_ID = @CourseCreateId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@CourseManageId, @CourseCreateId);
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @CourseManageId AND CHILD_PERMISSION_ID = @CourseEditId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@CourseManageId, @CourseEditId);
END

IF NOT EXISTS (SELECT 1 FROM PERMISSION_HIERARCHY WHERE PARENT_PERMISSION_ID = @CourseManageId AND CHILD_PERMISSION_ID = @CourseDeleteId)
BEGIN
    INSERT INTO PERMISSION_HIERARCHY (PARENT_PERMISSION_ID, CHILD_PERMISSION_ID)
    VALUES (@CourseManageId, @CourseDeleteId);
END

-- Grant permissions to admin role
DECLARE @AdminRoleId INT;
SELECT @AdminRoleId = ROLE_ID FROM ROLES WHERE ROLE_NAME = 'ADMIN';

IF @AdminRoleId IS NOT NULL
BEGIN
    -- Grant USER.MANAGE (which includes all child permissions)
    IF NOT EXISTS (SELECT 1 FROM ROLE_PERMISSIONS WHERE ROLE_ID = @AdminRoleId AND PERMISSION_ID = @UserManageId)
    BEGIN
        INSERT INTO ROLE_PERMISSIONS (ROLE_ID, PERMISSION_ID, ASSIGNED_BY, ASSIGNED_DATE)
        VALUES (@AdminRoleId, @UserManageId, 1, GETDATE());
    END

    -- Grant COURSE.MANAGE (which includes all child permissions)
    IF NOT EXISTS (SELECT 1 FROM ROLE_PERMISSIONS WHERE ROLE_ID = @AdminRoleId AND PERMISSION_ID = @CourseManageId)
    BEGIN
        INSERT INTO ROLE_PERMISSIONS (ROLE_ID, PERMISSION_ID, ASSIGNED_BY, ASSIGNED_DATE)
        VALUES (@AdminRoleId, @CourseManageId, 1, GETDATE());
    END
END

-- Log the setup in audit log (using user ID 1 as system user)
INSERT INTO PERMISSION_AUDIT_LOG (USER_ID, PERMISSION_ID, ACTION, CHANGED_BY, CHANGE_DATE, REASON)
SELECT 1, PERMISSION_ID, 'SETUP', 1, GETDATE(), 'Initial permission setup'
FROM PERMISSIONS
WHERE CATEGORY_ID IN (@UserCategoryId, @CourseCategoryId);

GO 